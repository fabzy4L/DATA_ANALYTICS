library(shiny); runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('DISEASE_OUTBREAK_TRACKER.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('DISEASE_OUTBREAK_TRACKER.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('DISEASE_OUTBREAK_TRACKER.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('~/Desktop/dotr.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
ggplot(filtered(), aes(x = Region, y = .data[[input$variable]], fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Region") +
ylab(input$variable) +
ggtitle("Disease Outbreak Tracker")
ggplot(filtered(), aes(x = Region, y = .data[[input$variable]], fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Region") +
ylab(input$variable) +
ggtitle("Disease Outbreak Tracker")
# Display graph
output$graph <- renderPlot({
ggplot(filtered(), aes(x = Region, y = .data[[input$variable]], fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Region") +
ylab(input$variable) +
ggtitle("Disease Outbreak Tracker")
})
server <- function(input, output) {
# Load data
outbreak <- read.csv("/Users/f4L/Documents/GitHub/RStudioDataAnalysis/EPIDEMIOLOGY/outbreak.csv")
outbreak$Region <- factor(outbreak$Region)
# Filter data based on user input
filtered <- reactive({
if (input$region == "All") {
filtered <- outbreak
} else {
filtered <- filter(outbreak, Region == input$region)
}
filtered <- filter(filtered, Cases >= input$cases,
Deaths >= input$deaths, Recovered >= input$recovered)
filtered
})
# Display table
output$table <- renderDataTable({
filtered()
})
# Display map
output$map <- renderLeaflet({
leaflet(filtered()) %>%
addTiles() %>%
addMarkers(~Longitude, ~Latitude, popup = ~paste("Cases: ", Cases,
"<br>Deaths: ", Deaths, "<br>Recovered: ", Recovered))
})
# Display graph
output$graph <- renderPlot({
ggplot(filtered(), aes(x = Region, y = .data[[input$variable]], fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Region") +
ylab(input$variable) +
ggtitle("Disease Outbreak Tracker")
})
}
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('dotr.R')
runApp('dotr.R')
runApp('dotr.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/EPIDEMIOLOGY/DISEASE_OUTBREAK_TRACKER.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('~/Desktop/dotr.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('Epidemiology Calculator.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/Linear Model Predictor.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/Shiny_NeuReGen_Gx.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/Linear Model Predictor.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/Shiny_NeuReGen_Gx.R')
runApp('~/NeuReGX_Heatmap.R')
runApp('~/Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NG4.R')

ylab="Distance (mi)",
xlim=c(0,40),
ylim=c(0,3))
abline(lm(distance2017~time2017), col='red')
abline(h=1.877569, col='purple')
text(20,2," Avg = 11:19 mins/mile ")
#text(20,2," Mean Time 2017 = 21.31")
minspermile <- 1/((distance2017)/(time2017))
mean(minspermile)
plot(distance2017~time2017,
main="2017",
xlab="Time (mins)",
ylab="Distance (mi)",
xlim=c(0,40),
ylim=c(0,3))
abline(lm(distance2017~time2017), col='red')
abline(h=1.877569, col='purple')
text(20,2," Avg = 11:19 mins/mile ")
#text(20,2," Mean Time 2017 = 21.31")
lm(distance2017~time2017)
# y = mx + b
# v = d/t
time_var = 11.32 #
d = time_var*0.07703 + 0.23611
# d = 1.09 miles
lm(distance2017~time2017)
# y = mx + b
# v = d/t
time_var = 11.32 #
d = time_var*0.07703 + 0.23611
# d = 1.09 miles
d
lm(distance2017~time2017)
# y = mx + b
# v = d/t
time_var = 11.32 #
d = time_var*0.07703 #+ 0.23611
# d ~ 1.11 miles
lm(distance2017~time2017)
# y = mx + b
# v = d/t
time_var = 11.32 #
d = time_var*0.07703 #+ 0.23611
# d ~ 1.11 miles
d
lm(distance2017~time2017)
# y = mx + b
# v = d/t
time_var = 11.32 #
d = time_var*0.07703 + 0.23611
# d ~ 1.11 miles
minspermile <- 1/((distance2017)/(time2017))
#mean(minspermile)
plot(distance2017~time2017,
main="2017",
xlab="Time (mins)",
ylab="Distance (mi)",
xlim=c(0,40),
ylim=c(0,3))
abline(lm(distance2017~time2017), col='red')
abline(h=1.877569, col='purple')
text(20,2," Avg = 11:19 mins/mile ")
#text(20,2," Mean Time 2017 = 21.31")
minspermile <- 1/((distance2017)/(time2017))
#mean(minspermile)
plot(distance2017~time2017,
main="2017",
xlab="Time (mins)",
ylab="Distance (mi)",
xlim=c(0,40),
ylim=c(0,3))
abline(lm(distance2017~time2017), col='red')
abline(h=1.877569, col='purple')
text(10,2," Avg = 11:19 mins/mile ")
#text(20,2," Mean Time 2017 = 21.31")
plot(dates_2017,time2017, ylab="Time (mins)", xlab="Dates" )
#points(dat)
fitiv <- fitiv[1:344,]
fitiv
library(BiocGenerics)
library(affy)
library(ArrayExpress)
library(limma)
library(RCurl)
library(dplyr)
library(shiny); runApp('Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NG4.R')
runApp('Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NG4.R')
runApp('Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NG4.R')
runApp('NeuReGX_Heatmap.R')
runApp('Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NG4.R')
runApp('NeuReGX_Heatmap.R')
runApp('Documents/GitHub/RStudioDataAnalysis/BIOSTATISTICS COURSE PROJECTS/Shiny Projects/NeureGen_Interactionplot.R')
runApp('NeuReGX_Heatmap.R')
library(shiny); runApp('Desktop/NeuReGen - Epi.R')
runApp('Desktop/NeuReGen - Epi.R')
install.packages("leaflet")
install.packages("leaflet")
runApp('Documents/GitHub/RStudioDataAnalysis/EPIDEMIOLOGY/DISEASE_OUTBREAK_TRACKER.R')
install.packages(c("shiny", "dplyr", "ggplot2", "leaflet"))
runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('DISEASE_OUTBREAK_TRACKER.R')
runApp('Documents/GitHub/RStudioDataAnalysis/EPIDEMIOLOGY/DISEASE_OUTBREAK_TRACKER.R')
runApp('Documents/GitHub/RStudioDataAnalysis/EPIDEMIOLOGY/DISEASE_OUTBREAK_TRACKER.R')
# Load the openPrimeR package
library(openPrimeR)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- PCR(gene_expr, outcome, cv = TRUE)
# Load the openPrimeR package
library(openPrimeR)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- PCR(gene_expr, outcome, cv = TRUE)
# Load the openPrimeR package
library(openPrimeR)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- PCR(gene_expr)
# Load the openPrimeR package
library(openPrimeR)
install.packages('pcr')
library(pcr)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
# pcr_result <- PCR(gene_expr, outcome, cv = TRUE)
# View the results
summary(pcr_result)
# Load the openPrimeR package
library(openPrimeR)
install.packages('pcr')
library(pcr)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- PCR(gene_expr, outcome, cv = TRUE)
install.packages("pcr")
# Load the openPrimeR package
library(openPrimeR)
install.packages('pcr')
library(pcr)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- pcr(gene_expr, outcome, cv = TRUE)
install.packages("pcr")
# Load the necessary packages
library(openPrimeR)
library(pls)
pcr
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
set.seed(123) # for reproducibility
pcr_result <- pcr(gene_expr, outcome, scale = TRUE, validation = "CV")
# Load the necessary packages
library(openPrimeR)
library(pls)
pcr
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
set.seed(123) # for reproducibility
#pcr_result <- pcr(gene_expr, outcome, scale = TRUE, validation = "CV")
pcr_result <- pcr(gene_expr, outcome, cv = TRUE)
# Load the necessary packages
library(openPrimeR)
library(pls)
pcr
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
set.seed(123) # for reproducibility
#pcr_result <- pcr(gene_expr, outcome, scale = TRUE, validation = "CV")
# Convert pcr object to lm object
pcr_lm <- as.lm(pcr_result)
# Load the necessary packages
library(openPrimeR)
library(pls)
pcr
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
set.seed(123) # for reproducibility
pcr_result <- pcr(gene_expr, outcome, scale = TRUE, validation = "CV")
# Load the necessary packages
library(openPrimeR)
library(pls)
pcr
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
set.seed(123) # for reproducibility
pcr_result <- pcr(gene_expr, outcome, scale = TRUE, validation = "CV")
# Load the openPrimeR package
library(openPrimeR)
#install.packages('pcr')
#library(pcr)
# Load example gene expression data
data(mtcars)
# Extract gene expression data and outcome variable
gene_expr <- as.matrix(mtcars[, 2:11])
outcome <- mtcars$am
# Perform PCR analysis with cross-validation
pcr_result <- PCR(gene_expr, outcome, cv = TRUE)
# Load the iris dataset
data(iris)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- sample(nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Load the randomForest package
library(randomForest)
# Train the random forest model
model <- randomForest(Species ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the accuracy of the model
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
print(paste("Accuracy:", round(accuracy, 2)))
# Load the iris dataset
data(iris)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- sample(nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Load the randomForest package
library(randomForest)
# Train the random forest model
model <- randomForest(Species ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the accuracy of the model
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
print(paste("Accuracy:", round(accuracy, 2)))
# Load the iris dataset
data(iris)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- sample(nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Load the randomForest package
library(randomForest)
# Train the random forest model
model <- randomForest(Species ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the accuracy of the model
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
print(paste("Accuracy:", round(accuracy, 2)))
# Load the iris dataset
data(iris)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- sample(nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Load the randomForest package
library(randomForest)
# Train the random forest model
model <- randomForest(Species ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the accuracy of the model
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
print(paste("Accuracy:", round(accuracy, 2)))
reticulate::repl_python()
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
pgx <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/pgx_genes.csv"), stringsAsFactors = TRUE )
dna <- dna[7:720822,]
dna <- dna %>%
rename(
refsnp_id = X..MyHeritage.DNA.raw.data.,
CHROMOSOME = X,
POSITION = X.1,
RESULT = X.2
)
dna1 <- dna[1:1000,]
pgx <- pgx %>%
rename(
refsnp_id = DBSNP,
GENES = Genes
)
pgx
# CHOP FILE INTO LESS NUMBERS
dna2 <- dna[1001:2000,]
dna3 <- dna[2001:3000,]
dna4 <- dna[3001:4000,]
#RSID	CHROMOSOME	POSITION	RESULT
#library(biomaRt)
#Get all the marts names
listMarts()
#select a mart to obtain dataset
ensembl <- useMart("ENSEMBL_MART_SNP")
#Dataset obtained
listDatasets(ensembl)
#Choose Mart & Dataset so we can set filters
ensembl=useMart("ENSEMBL_MART_SNP", dataset= "hsapiens_snp")
#create filter list so we can check criteria
myfilters <- listFilters(ensembl)
#Make a vector for the filter
filter1 <- 'snp_filter'
#Attributes
attributes1 <- listAttributes(ensembl)
att1 <- c('refsnp_id','snp','allele','chr_name', 'minor_allele', 'minor_allele_freq','associated_gene','phenotype_description' )
searchResults <- getBM(attributes=att1,
filters=filter1,
values=dna1, mart=ensembl)
searchResults2 <- getBM(attributes=att1,
filters=filter1,
values=dna2, mart=ensembl)
searchResults3 <- getBM(attributes=att1,
filters=filter1,
values=dna3, mart=ensembl)
srd1 <- merge(dna1, searchResults, by="refsnp_id")
#Import to clean
#library(dplyr)
#rsid200 <- read.csv('/Users/f4L/Documents/GitHub/RStudioDataAnalysis/DNA/rsid_1_200.csv')
#rsid200_a <- rsid200[order(decreasing = TRUE, rsid200$phenotype_description),]
#Exported the data into a TXT file from the csv - easier to work.
#RSID2<- data.frame(RSID)
#RSID2
#write.csv(RSID2, file='/Users/f4L/Documents/GitHub/RStudioDataAnalysis/DNA/RSID2.txt',row.names=FALSE,na='', quote=FALSE)
#write.csv(dna_2, file='/Users/f4L/Documents/GitHub/RStudioDataAnalysis/DNA/DNA_2.csv',row.names=FALSE,na='', quote=FALSE)
#srd2 <- merge(dna2, searchResults2, by="refsnp_id")
#srd3 <- merge(dna3, searchResults3, by="refsnp_id")
#srd4 <- merge(dna4, searchResults4, by="refsnp_id")
library(shiny); runApp('Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/GENE_VIEWER.R')
}
runApp('Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/INT_GENEVIEW_NGX.R')
runApp('Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/INT_GENEVIEW_NGX.R')
runApp('INT_GENEVIEW_NGX.R')
dna <- dna %>%
rename(
refsnp_id = X..MyHeritage.DNA.raw.data.,
CHROMOSOME = X,
POSITION = X.1,
RESULT = X.2
)
runApp('Desktop/Untitled.R')
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
#dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
dna <- read.csv("/Users/f4L/Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/rsid200.csv)
dna <- dna[7:720822,]
dna <- dna %>%
rename(
refsnp_id = X..MyHeritage.DNA.raw.data.,
CHROMOSOME = X,
POSITION = X.1,
RESULT = X.2
)
dna1 <- dna[1:1000,]
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
#dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
dna <- read.csv("/Users/f4L/Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/rsid200.csv")
#dna <- dna[7:720822,]
dna <- dna %>%
rename(
refsnp_id = X..MyHeritage.DNA.raw.data.,
CHROMOSOME = X,
POSITION = X.1,
RESULT = X.2
)
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
#dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
dna <- read.csv("/Users/f4L/Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/rsid200.csv")
#dna <- dna[7:720822,]
dna1 <- dna[1:1000,]
listMarts()
#select a mart to obtain dataset
ensembl <- useMart("ENSEMBL_MART_SNP")
#Dataset obtained
listDatasets(ensembl)
listMarts()
#select a mart to obtain dataset
ensembl <- useMart("ENSEMBL_MART_SNP")
#Dataset obtained
#listDatasets(ensembl)
#Choose Mart & Dataset so we can set filters
ensembl=useMart("ENSEMBL_MART_SNP", dataset= "hsapiens_snp")
#create filter list so we can check criteria
myfilters <- listFilters(ensembl)
#Make a vector for the filter
filter1 <- 'snp_filter'
#Attributes
attributes1 <- listAttributes(ensembl)
att1 <- c('refsnp_id','snp','allele','chr_name', 'minor_allele', 'minor_allele_freq','associated_gene','phenotype_description' )
searchResults <- getBM(attributes=att1,
filters=filter1,
values=dna1, mart=ensembl)
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
#dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
dna <- read.csv("/Users/f4L/Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/rsid200.csv")
#dna <- dna[7:720822,]
dna1 <- dna[1:1000,]
#listMarts()
#select a mart to obtain dataset
ensembl <- useMart("ENSEMBL_MART_SNP")
#Dataset obtained
#listDatasets(ensembl)
#Choose Mart & Dataset so we can set filters
ensembl=useMart("ENSEMBL_MART_SNP", dataset= "hsapiens_snp")
#create filter list so we can check criteria
myfilters <- listFilters(ensembl)
#Make a vector for the filter
filter1 <- 'snp_filter'
#Attributes
attributes1 <- listAttributes(ensembl)
att1 <- c('refsnp_id','snp','allele','chr_name', 'minor_allele', 'minor_allele_freq','associated_gene','phenotype_description' )
searchResults <- getBM(attributes=att1,
filters=filter1,
values=dna1, mart=ensembl)
library(data.table)
library(RCurl)
library(randomForest)
library(dplyr)
library(tidyverse)
library(biomaRt)
#dna <- read.csv(text = getURL("https://raw.githubusercontent.com/fabzy4L/DATA_ANALYTICS/main/DNA_R/AlvarezPrimo_MyHeritage_Raw_DNA.csv") )
dna <- read.csv("/Users/f4L/Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/rsid200.csv")
#dna <- dna[7:720822,]
dna1 <- dna[1:1000,]
#listMarts()
#select a mart to obtain dataset
ensembl <- useMart("ENSEMBL_MART_SNP")
#Dataset obtained
#listDatasets(ensembl)
#Choose Mart & Dataset so we can set filters
ensembl=useMart("ENSEMBL_MART_SNP", dataset= "hsapiens_snp")
#create filter list so we can check criteria
myfilters <- listFilters(ensembl)
#Make a vector for the filter
filter1 <- 'snp_filter'
#Attributes
attributes1 <- listAttributes(ensembl)
att1 <- c('refsnp_id','snp','allele','chr_name', 'minor_allele', 'minor_allele_freq','associated_gene','phenotype_description' )
searchResults <- getBM(attributes=att1,
filters=filter1,
values=dna1, mart=ensembl)
srd1 <- merge(dna1, searchResults, by="refsnp_id")
searchResults
runApp('Desktop/Untitled2.R')
runApp('Desktop/Untitled2.R')
runApp('Desktop/Untitled2.R')
runApp('Desktop/Untitled2.R')
runApp('Desktop/Untitled2.R')
runApp('Documents/GitHub/DATA_ANALYSIS/DATA_ANALYTICS/R_SHINY_PROJECTS/INT_GENEVIEW_NGX.R')
